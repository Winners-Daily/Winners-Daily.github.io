{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ameer\\\\Documents\\\\website\\\\Winners-Daily.github.io\\\\components\\\\Counter.js\";\nimport React, { useEffect, useState, useRef } from 'react'; //styling\n\nimport '../styles/counter.module.css';\n\nfunction useOnScreen(ref) {\n  const {\n    0: isIntersecting,\n    1: setIntersecting\n  } = useState(false);\n  const observer = new IntersectionObserver(([entry]) => setIntersecting(entry.isIntersecting));\n  useEffect(() => {\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\n\nconst Count = props => {\n  // label of counter\n  // number to increment to\n  // duration of count in seconds\n  const label = props.lable;\n  const number = props.number;\n  const duration = props.duration;\n  const ref = useRef();\n  const isVisible = useOnScreen(ref); // number displayed by component\n\n  const {\n    0: count,\n    1: setCount\n  } = useState(\"0\");\n  useEffect(() => {\n    let start = 0; // first three numbers from props\n\n    const end = parseInt(number.substring(0, 3)); // if zero, return\n\n    if (start === end) return; // find duration per increment\n\n    let totalMilSecDur = parseInt(duration);\n    let incrementTime = totalMilSecDur / end * 1000; // timer increments start counter \n    // then updates count\n    // ends if start reaches end\n\n    if (isVisible) {\n      let timer = setInterval(() => {\n        start += 1;\n        setCount(String(start) + number.substring(3));\n        if (start === end) clearInterval(timer);\n      }, incrementTime);\n    } // dependency array\n\n  }, [number, duration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Count\",\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        style: {\n          font: \"800 40px system-ui\"\n        },\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Count;","map":{"version":3,"sources":["C:/Users/ameer/Documents/website/Winners-Daily.github.io/components/Counter.js"],"names":["React","useEffect","useState","useRef","useOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect","Count","props","label","lable","number","duration","isVisible","count","setCount","start","end","parseInt","substring","totalMilSecDur","incrementTime","timer","setInterval","String","clearInterval","font"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD,C,CAEA;;AACA,OAAO,8BAAP;;AAGA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AAEtB,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAoCL,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CACb,CAAC,CAACC,KAAD,CAAD,KAAaH,eAAe,CAACG,KAAK,CAACJ,cAAP,CADf,CAAjB;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACG,OAAT,CAAiBN,GAAG,CAACO,OAArB,EADY,CAEZ;;AACA,WAAO,MAAM;AAAEJ,MAAAA,QAAQ,CAACK,UAAT;AAAuB,KAAtC;AACH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAOP,cAAP;AACH;;AAGD,MAAMQ,KAAK,GAAGC,KAAK,IAAI;AACnB;AACA;AACA;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACE,KAApB;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACG,MAArB;AACA,QAAMC,QAAQ,GAAIJ,KAAK,CAACI,QAAxB;AAEA,QAAMd,GAAG,GAAGF,MAAM,EAAlB;AACA,QAAMiB,SAAS,GAAGhB,WAAW,CAACC,GAAD,CAA7B,CATmB,CAWnB;;AACA,QAAM;AAAA,OAACgB,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,CAAC,GAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,KAAK,GAAG,CAAZ,CADY,CAEZ;;AACA,UAAMC,GAAG,GAAGC,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,CAAjB,EAAoB,CAApB,CAAD,CAApB,CAHY,CAIZ;;AACA,QAAIH,KAAK,KAAKC,GAAd,EAAmB,OALP,CAOZ;;AACA,QAAIG,cAAc,GAAGF,QAAQ,CAACN,QAAD,CAA7B;AACA,QAAIS,aAAa,GAAID,cAAc,GAAGH,GAAlB,GAAyB,IAA7C,CATY,CAWZ;AACA;AACA;;AACA,QAAIJ,SAAJ,EAAc;AACV,UAAIS,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC1BP,QAAAA,KAAK,IAAI,CAAT;AACAD,QAAAA,QAAQ,CAACS,MAAM,CAACR,KAAD,CAAN,GAAgBL,MAAM,CAACQ,SAAP,CAAiB,CAAjB,CAAjB,CAAR;AACA,YAAIH,KAAK,KAAKC,GAAd,EAAmBQ,aAAa,CAACH,KAAD,CAAb;AACtB,OAJsB,EAIpBD,aAJoB,CAAvB;AAKH,KApBW,CAqBZ;;AACH,GAtBQ,EAsBN,CAACV,MAAD,EAASC,QAAT,CAtBM,CAAT;AAwBA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACI;AAAA,6BACI;AAAG,QAAA,KAAK,EAAE;AAAEc,UAAAA,IAAI,EAAE;AAAR,SAAV;AAAA,kBAA0CZ;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA7CD;;AA+CA,eAAeP,KAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\n//styling\r\nimport '../styles/counter.module.css';\r\n\r\n\r\nfunction useOnScreen(ref) {\r\n\r\n    const [isIntersecting, setIntersecting] = useState(false)\r\n\r\n    const observer = new IntersectionObserver(\r\n        ([entry]) => setIntersecting(entry.isIntersecting)\r\n    )\r\n\r\n    useEffect(() => {\r\n        observer.observe(ref.current)\r\n        // Remove the observer as soon as the component is unmounted\r\n        return () => { observer.disconnect() }\r\n    }, [])\r\n\r\n    return isIntersecting\r\n}\r\n\r\n\r\nconst Count = props => {\r\n    // label of counter\r\n    // number to increment to\r\n    // duration of count in seconds\r\n    const label = props.lable\r\n    const number = props.number\r\n    const duration  = props.duration\r\n\r\n    const ref = useRef()\r\n    const isVisible = useOnScreen(ref)\r\n\r\n    // number displayed by component\r\n    const [count, setCount] = useState(\"0\")\r\n\r\n    useEffect(() => {\r\n        let start = 0;\r\n        // first three numbers from props\r\n        const end = parseInt(number.substring(0, 3))\r\n        // if zero, return\r\n        if (start === end) return;\r\n\r\n        // find duration per increment\r\n        let totalMilSecDur = parseInt(duration);\r\n        let incrementTime = (totalMilSecDur / end) * 1000;\r\n\r\n        // timer increments start counter \r\n        // then updates count\r\n        // ends if start reaches end\r\n        if (isVisible){\r\n            let timer = setInterval(() => {\r\n                start += 1;\r\n                setCount(String(start) + number.substring(3))\r\n                if (start === end) clearInterval(timer)\r\n            }, incrementTime);\r\n        }\r\n        // dependency array\r\n    }, [number, duration]);\r\n\r\n    return (\r\n        <div className=\"Count\">\r\n            <h3>\r\n                <i style={{ font: \"800 40px system-ui\"}}>{count}</i>\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Count;"]},"metadata":{},"sourceType":"module"}